const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');
const { exec } = require('child_process');  // For executing terminal commands
const fs = require('fs');
const os = require('os');
const { createObjectCsvWriter } = require('csv-writer');

// Concurrency control variables
const MAX_CONCURRENT_TASKS = 5;
let activeTasks = 0;
const taskQueue = [];

// Function to limit concurrency
function limitConcurrency(taskFunction) {
  return new Promise((resolve, reject) => {
    const wrappedTask = async () => {
      try {
        activeTasks++;
        const result = await taskFunction();
        activeTasks--;
        resolve(result);
        // Start next task if available
        if (taskQueue.length > 0) {
          const nextTask = taskQueue.shift();
          nextTask();
        }
      } catch (error) {
        activeTasks--;
        reject(error);
        // Start next task if available
        if (taskQueue.length > 0) {
          const nextTask = taskQueue.shift();
          nextTask();
        }
      }
    };

    if (activeTasks < MAX_CONCURRENT_TASKS) {
      wrappedTask();
    } else {
      taskQueue.push(wrappedTask);
    }
  });
}

// Function to create temporary directories for DICOM files
function createTempDir() {
  const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'dicom-compare-'));
  return tempDir;
}

// Function to process DICOM file with Plastimatch and extract structures
function processDicom(filePath, tempDir) {
  return new Promise((resolve, reject) => {
    const normalizedFilePath = path.normalize(filePath);
    const normalizedTempDir = path.normalize(tempDir);
    // Use Plastimatch to convert the DICOM RTSTRUCT into individual structure files
    const command = `plastimatch convert --input "${normalizedFilePath}" --output-prefix "${normalizedTempDir}${path.sep}"`;
    console.log(command);
    exec(command, (error, stdout, stderr) => {
      if (error) {
        const errorMessage = `Erro ao processar DICOM: ${stderr || error.message}`;
        reject(errorMessage);
      } else {
        resolve(tempDir);
      }
    });
  });
}

// Function to list the files generated by Plastimatch (structures)
function getStructures(tempDir) {
  return new Promise((resolve, reject) => {
    fs.readdir(tempDir, (err, files) => {
      if (err) {
        reject(`Erro ao listar arquivos na pasta: ${err}`);
      } else {
        // Map structure names to their full file paths
        const structures = {};
        files.forEach(file => {
          const structureName = path.basename(file, path.extname(file));
          const filePath = path.join(tempDir, file);
          structures[structureName] = filePath;
        });
        resolve(structures);
      }
    });
  });
}

// Handle loading and processing of DICOM files
ipcMain.handle('process-dicom', async (event, filePath) => {
  try {
    const tempDir = createTempDir();
    await processDicom(filePath, tempDir);
    const structures = await getStructures(tempDir);
    return { tempDir, structures };  // Return the temporary directory and extracted structures
  } catch (err) {
    console.error(err);
    return null;
  }
});

// Function to calculate the Dice coefficient between two structures using Plastimatch
function calcularDice(estrutura1Caminho, estrutura2Caminho) {
  return new Promise((resolve, reject) => {
    const normalizedEstrutura1 = path.normalize(estrutura1Caminho);
    const normalizedEstrutura2 = path.normalize(estrutura2Caminho);
    const command = `plastimatch dice  "${normalizedEstrutura1}" "${normalizedEstrutura2}"`;
    console.log(command);
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(`Erro ao calcular índice Dice: ${stderr || error.message}`);
      } else {
        // Extract the Dice coefficient value from stdout
        const match = stdout.match(/DICE:\s*([0-9]*\.?[0-9]+)/i);
        const diceValue = match ? parseFloat(match[1]) : null;
        resolve(diceValue);
      }
    });
  });
}

// Handle the request to calculate the Dice coefficient with concurrency control
ipcMain.handle('calcular-dice', async (event, estrutura1Caminho, estrutura2Caminho) => {
  return limitConcurrency(async () => {
    try {
      const dice = await calcularDice(estrutura1Caminho, estrutura2Caminho);
      return dice;  // Return the Dice coefficient value
    } catch (err) {
      console.error(err);
      return null;
    }
  });
});

// Function to export Dice results to CSV
ipcMain.handle('export-csv', async (event, resultados) => {
  // Open save dialog to allow user to choose save location
  const { canceled, filePath } = await dialog.showSaveDialog({
    title: 'Salvar resultados',
    defaultPath: 'resultados_dice.csv',
    filters: [{ name: 'CSV Files', extensions: ['csv'] }]
  });

  if (canceled || !filePath) {
    return 'Exportação cancelada.';
  }

  const csvWriter = createObjectCsvWriter({
    path: filePath,
    header: [
      { id: 'estrutura1', title: 'Estrutura 1 (Arquivo 1)' },
      { id: 'estrutura2', title: 'Estrutura 2' },
      { id: 'arquivoComparado', title: 'Arquivo Comparado' },
      { id: 'dice', title: 'Índice Dice' }
    ]
  });

  // Write the results to the CSV file
  try {
    await csvWriter.writeRecords(resultados);
    return 'Arquivo CSV exportado com sucesso!';
  } catch (error) {
    console.error('Erro ao exportar o arquivo CSV:', error);
    return 'Erro ao exportar CSV.';
  }
});

// Function to create the application window
function createWindow() {
  const win = new BrowserWindow({
    width: 1000,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),  // Use 'preload.js'
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false
    }
  });

  win.loadFile('index.html');
  // Uncomment the line below to open the DevTools for debugging
  // win.webContents.openDevTools();
}

// Handler to open file dialog
ipcMain.handle('dialog:openFile', async () => {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openFile'],
    filters: [
      { name: 'DICOM Files', extensions: ['dcm'] }
    ]
  });

  if (canceled) {
    return null;  // Return null if the user cancels
  } else {
    return filePaths[0];  // Return the path of the selected file
  }
});

// Initialize Electron
app.whenReady().then(() => {
  createWindow();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit the app when all windows are closed
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});
